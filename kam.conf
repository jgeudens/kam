
[global]

# Here you can define some global parameters like logging, debugging and
# some timing used in the kam service

# Specify the period time of a round. Kam will check all parameters specified
# futher in this config file each 'period' seconds.
#
# When you do not define a period, kam will crash
period = 60

# Specify how long the computer is 'dead' (when none check keeps the server
# alive) for 'idle_time' minutes
idle_time = 30

# The idle_command is executed when the server is idle for idle_time.
# This is just a bash command, so you can specify multiple commands
# separated by ;
# example: idle_command = shutdown_apps_script; shutdown -h now
idle_command = shutdown -h now

[filedebug]
# This section is only read when debugging is enabled in the [global] section

# Specify a path where to store the debug output
# When left empty or not declared, the default path /var/log/kam.debug is used
path = /var/log/kam.debug

# Specify the maximum amout of lines the debug file should contain. When new
# lines would exceed this value, the oldest lines are removed
# max_lines = integer
# use 0, leave empty or do not declare to set no limit
max_lines = 2000

[filelog]
# analogue to the [debug] section

# For logging the default path is /var/log/kam.log
path = /var/log/kam.log
max_lines = 200

[processor]
# Here you can specify some parameters to keep the computer alive using some
# processor parameters

# Specify a total load in %
# When the system uses more total cpu resources than this value, the computer is
# kept alive.
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
# total_load = 0.0 to 100.0
total_load = 20.0

# Specify a total load per cpu in %
# When one core in the system uses more cpu resources than this value, the
# computer is kept alive
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
# per_cpu_load = 0.0 to 100.0
per_cpu_load = 30.0

[network]
# Keep the computer alive using network parameters

# When the computer upload speed exceeds this value, the computer is kept alive
# The speed is in bytes/sec, you can use K for 1KiB and M for 1MiB
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
upload_speed = 10K

# Same behaviour as upload_speed
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
download_speed = 10K

# Here you can define connections to keep the computer alive.
# Kam checks the currently connected devices to this computer, and if it is
# in a network, defined here, the computer is kept alive
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
# The syntax is a list, separated by commas (,) of ips with a subnetmask:
# 192.168.0.0/24, 10.0.0.0/8, 192.168.1.0/30, 192.168.1.12/30
# connections = 192.168.1.0/24

[process]
# When specific processes run, the computer is kept alive

# Define the processes kam should check if they are running
# for each process you can use a parameter to define how many times it should
# at least be running, for example:
# When openssh is installed, there is always 1 process sshd, for each
# connection, 2 more sshd processes are started, so you cannot just check for
# 1 sshd process. This will keep your computer alive forever until you shutdown
# sshd. You can solve this by using the paremeter min_sshd, this defines how
# many sshd processes should run, before the computer is kept alive.
# This value is a list of the name of applications, separated by commas
# processes = sshd, bash, apache
#
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
processes = sshd

# This parameter defines how many sshd processes there should run to keep the
# server alive. The syntax for this parameter is min_{process_name}, where
# {process_name} is repaced by a process in the list processes
#
#When you do not define this parameter for a process, the value
# 1 is used.
min_sshd = 2

#[kick]
# In this section you can keep the computer alive by 'kicking' kam. This is done
# by creating a file. Each round kam checks if this file exists and keeps the
# server alive it is.

# A comma separated list of files kam should check. This way you can create
# specific locations where other applications have rights to create the files.
#
# When no value is assigned or this parameter is commented out, it is not used
# to keep the computer alive.
#files = /tmp/kick
