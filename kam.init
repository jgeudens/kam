#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Keep Alive Monitor (KAM) monitors some performance parameters and services. When those are idle, a specified command is executed."
NAME=kam
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME
VERSION=$(cat /etc/kam/version)

# Exit if the package is not installed
if [ ! -x "$DAEMON" ]
then
	echo "$DAEMON not found"
	exit 0
fi

uid=$(id -u)

if [ $uid -ne 0 ]
then
	is_root="n"
else
	is_root="y"
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	if [ "$is_root" = "n" ]
	then
		log_daemon_msg "You must be root to start the service!"
		return 1
	fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	log_daemon_msg "Starting $NAME $VERSION"
	ps -e | grep $NAME 2>&1 > /dev/null
	ret=$?

	if [ $ret -eq 0 ]
	then
		log_end_msg 1
		log_daemon_msg "Already running"
		return 1
	fi

	start-stop-daemon --start --quiet --exec $DAEMON -- $DAEMON_ARGS

	ret=$?
	if [ $ret -ne 0 ]
	then
		log_end_msg 1
		log_daemon_msg "$ret: Could not start daemon"
	else
		log_end_msg 0
	fi

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	if [ "$is_root" = "n" ]
        then
                log_daemon_msg "You must be root to stop the service!"
                return 1
        fi

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	log_daemon_msg "Stopping $NAME $VERSION"

	ps -e | grep $NAME 2>&1 > /dev/null
	if [ $? -eq 1 ]
	then
		log_end_msg 1
		log_daemon_msg "$NAME not running"
		return 1
	fi

	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --name $NAME
	RETVAL="$?"
	if [ $RETVAL -eq 2 ]
	then
		log_end_msg 1
		return 2
	fi
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	if [ $? -eq 2 ]
	then
		log_end_msg 1
		return 2
	fi

	log_end_msg 0

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	if [ "$is_root" = "n" ]
        then
                log_daemon_msg "You must be root to reload the service!"
                return 1
        fi

	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	do_stop
	if [ $? -eq 2 ]
	then
		return 2
	fi
	do_start
	return $?
}

do_kick() {
	touch /tmp/kam_kick
}

case "$1" in
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	status)
		status_of_proc "$DAEMON" "$NAME $VERSION" && exit 0 || exit $?
		;;
	restart|reload|force-reload)
		#
		# If do_reload() is not implemented then leave this commented out
		# and leave 'force-reload' as an alias for 'restart'.
		#
		#log_daemon_msg "Reloading $DESC" "$NAME"
		do_reload
		#log_end_msg $?
		;;
	kick)
		do_kick
		;;
#  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
#	do_stop
#	case "$?" in
#	  0|1)
#		do_start
#		case "$?" in
#			0) log_end_msg 0 ;;
#			1) log_end_msg 1 ;; # Old process is still running
#			*) log_end_msg 1 ;; # Failed to start
#		esac
#		;;
#	  *)
#		# Failed to stop
#		log_end_msg 1
#		;;
#	esac
#	;;
	*)
		#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload|kick}" >&2
		exit 3
		;;
esac

:
